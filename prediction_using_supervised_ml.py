# -*- coding: utf-8 -*-
"""Prediction Using Supervised ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHTSryIQj14QilrNGuoxDjE98UfSSV9i

To predict the percentage of marks that a student is expected to score based upon the number of hours they studied.
As it involves 2 variable in which one is depenent on other so we will use Linear Regression

**Linear Regression**
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

#Fetching data using URL
url = "http://bit.ly/w-data"
data = pd.read_csv(url)

print("Data imported successfully")
data.head(5)

#Plotting graph using matplotlib library
data.plot(x='Hours', y='Scores', style='x' 'c')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

#Data Preparation i.e. dividing data into "attributes" (inputs) and "labels" (outputs).
X = data.iloc[:, :-1].values  
Y = data.iloc[:, 1].values  

print(X)
print(Y)

#Split this data into Training and Test sets
from sklearn.model_selection import train_test_split  
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.8, random_state=1) 

#Training the data using Linear Regression Model
from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, Y_train)

#Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, Y,color='r')
plt.plot(X, line);
plt.show()

#Predictions
print(X_test) # Testing data - In Hours
Y_predict = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': Y_test, 'Predicted': Y_predict})  
df

# Our data Prediction
hours = 9.25
own_predict = regressor.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_predict[0]))

#Evaluate the performance of algorithm
from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(Y_test, Y_predict))

"""**The End**"""